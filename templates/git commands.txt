git branch -a
git branch -v
git branch -vv
git branch -r

git branch <branch name>
git branch zeeshan

git branch --set-upstream-to=<remote server name>/<local branch name>
git branch --set-upstream-to=origin/zeeshan

git remote -v

git checkout -b <local branch name> <remote server name>/<remote branch name>
git checkout -b zeeshan origin/zeeshan

git checkout <branch name>
git checkout zeeshan


## Tools for ease
gitlens
gitgraph
tabnine
autodocstring

git clone <url>
git clone https://github.com/Zeeshankhan29/Database.git

git clone -b <remote branch name> <remote url or git url like http or ssh>
git clone -b zeeshan https://github.com/Zeeshankhan29/Database.git

git rm --cached <filename>
git rm --cached main.py

git remote rename <old origin name> <new origin name>
git remote rename origin origin1


git fetch --all
git reset --hard origin/{{your branch name}}

#To delete local and remote branch 
git branch -d {local_branch_name}
git push {origin_name} --delete {remote_branch_name}


git show {hash_code}

#One branch clone commands
git clone -b <branch name> --single-branch <url_link>
gitk


#two branch clone commands( here development and feature are the two remote branches)
git clone --branch development --branch feature --single-branch https://github.com/username/repo.git


git show <commit id>
git diff <filename>
git commit --amend
git restore <filename> # to remove from the staging stage
git restore --staged <filename>
git reset --hard HEAD^ # To remove the latest commit 
git reset --soft <required commit id> # will moved to required commit and remove all the commit after required commit but keep the files in the staging stage
git stash # To save changes locally without commit
git stash apply  #To reget the local changes saved 
git stash -m "apply stash"
git stash list
git stash drop 0 


git ls-remote --heads <origin name>
git ls-remote <origin name>


git pull --allow-unrelated-histories
git fetch origin
git merge origin/master --allow-unrelated-histories
git merge --squash feature

git config --global http.postBuffer 524288000  # 500 MB
git config --global http.lowSpeedLimit 0
git config --global http.lowSpeedTime 999999

winpty python <filename> & # To run background flask service without getting reflected in terminal (only in gitbash)
nohup python <filename> & # To run background service for flask

ps aux | grep main1.py # To check which service are running specially id
ps aux
pkill -f <filename>
kill -9 <PID> # To terminate the background service

