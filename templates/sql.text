show databases;
create database if not exists ineuron_fsda;
use ineuron_fsda;
show tables;

create table if not exists bank_details(
age int,
job varchar(30),
marital varchar(30),
education varchar(30),
`default` varchar(30),
balance int ,
housing varchar(30),
loan varchar(30) ,
contact varchar(30),
`day` int,
`month` varchar(30) ,
duration int ,
campaign int,
pdays int ,
previous int ,
poutcome varchar(30) ,
y varchar(30));

select * from bank_details;

insert into bank_details values(58,"management","married","tertiary","no",2143,"yes","no","unknown",5,"may",261,1,-1,0,"unknown","no");

insert into bank_details values
(44,"technician","single","secondary","no",29,"yes","no","unknown",5,"may",151,1,-1,0,"unknown","no"),
(33,"entrepreneur","married","secondary","no",2,"yes","yes","unknown",5,"may",76,1,-1,0,"unknown","no");

load data local  infile 'C:/bank-full.csv'
into table bank_details
fields terminated by ';'
enclosed by '"'
lines terminated by '\n'
ignore 1 rows;

OPT_LOCAL_INFILE=1
SHOW GLOBAL VARIABLES LIKE 'local_infile';
set global local_infile = 1;


select count(*) from  bank_details

select * from bank_details

select age , loan , job from bank_details

select `default` from  bank_details

select * from bank_details limit 10

select * from bank_details where age  =  33

select * from bank_details where age = 60

select * from bank_details where age = 60 and job = 'retired'

select * from bank_details where education = 'unknown' or marital = 'single'

select * from bank_details where (education = 'unknown' or marital = 'single') and balance < 500

select distinct job from bank_details

select * from bank_details

select * from bank_details order by age
select * from bank_details order by age desc


select * from bank_details;
drop table bank_details;

select * from bank_details where balance =(select max(balance) from bank_details);
select * from bank_details order by balance desc limit 0,1;

select * from bank_details where balance =(select min(balance) from bank_details);
select * from bank_details where balance<0 order by balance limit 0,1 ;

select * from bank_details order by age desc limit 0,1;
select * from bank_details where age = (select max(age) from bank_details) limit 1;

select * from bank_details order by age desc limit 2,1;

select max(balance) from bank_details;
select min(balance) from bank_details;
select * from bank_details where loan = 'yes'

select  avg(balance) from bank_details where job = 'admin.'

select  avg(balance) from bank_details where job = 'admin.'

select * from bank_details where job = 'unknown' and age <= 45

select * from bank_details where education = 'primary' and job = 'unknown'


select * from bank_details where balance < 0

select balance , housing  from bank_details where housing = 'no'

select count(*), marital from bank_details where education ='primary' and loan ='yes' group by marital order by marital;


delimiter $$
create procedure Myprocedure()
begin
	select * from bank_details;
end $$

call  Myprocedure();

delimiter $$
create procedure test(in v1 varchar(50) ,in v2 varchar(50))
begin
	select * from bank_details  where education =v1 and housing =v2;
end $$


call test('primary','yes');

delimiter $$
create procedure test1(in v1 varchar(50) ,in v2 varchar(50))
begin
	select * from bank_details  where job =v1 and housing =v2;
end $$

call test1('blue-collar','yes');

create view Myviews as
select job ,marital, education,`default` from bank_details;

select * from Myviews;



use ineuron_fsda;



create table if not exists dress(
`Dress_ID`	varchar(50),
`Style`	varchar(50),
`Price`	varchar(50),
`Rating`	varchar(50),
`Size`	varchar(50),
`Season` varchar(50),
`NeckLine`	varchar(50),
`SleeveLength`	varchar(50),
`waiseline`	varchar(50),
`Material`	varchar(50),
`FabricType`	varchar(50),
`Decoration`	varchar(50),
`Pattern` varchar(50),
`Type`	varchar(50),
`Recommendation` varchar(50));



load data local  infile 'C:/AttributeDataSet.csv'
into table dress
fields terminated by ','
enclosed by '"'
lines terminated by '\n'
ignore 1 rows;

select * from dress;
drop table dress;

OPT_LOCAL_INFILE=1;
SHOW GLOBAL VARIABLES LIKE 'local_infile';
set global local_infile = 1;


create table if not exists test3 (
test_id int ,
test_name varchar(30) ,
test_mailid varchar(30),
teast_adress varchar(30),
test_salary int check(test_salary > 10000));

insert into test3 values (1,'sudhanshu','sudhanshu@ineuron.ai','benglaore' , 500),
(2,'krish','krish@gmail.com', 'bengalore' , 30000),
(3,'hitesh' ,'hitesh@ineuron.ai','bengalore' , 111000),
(4,'shubahm' , 'shudham@gmail.com', 'jaipur',20000);

select * from test3


create table if not exists test (
test_id int ,
test_name varchar(30) ,
test_mailid varchar(30),
test_address varchar(30) check (test_address='bangalore'),
test_salary int check(test_salary > 10000));

insert into test values (1,'sudhanshu','sudhanshu@ineuron.ai','bangalore' , 50000),
(2,'krish','krish@gmail.com', 'bangalore' , 30000),
(3,'hitesh' ,'hitesh@ineuron.ai','bangalore' , 111000),
(4,'shubahm' , 'shudham@gmail.com', 'bangalore',20000);

select * from test

create table if not exists test1 (
test_id int ,
test_name varchar(30) ,
test_mailid varchar(30),
test_address varchar(30) ,
test_salary int,
primary key (test_id) );

insert into test1 values (21,'sudhanshu','sudhanshu@ineuron.ai','bangalore' , 50000),
(2,'krish','krish@gmail.com', 'bangalore' , 30000),
(3,'hitesh' ,'hitesh@ineuron.ai','bangalore' , 111000),
(4,'shubahm' , 'shudham@gmail.com', 'bangalore',20000);

select * from test1;


create table if not exists test4(
test_id int not null auto_increment,
test_name varchar(30) ,
test_mailid varchar(30),
teast_adress varchar(30),
primary key (test_id));

drop table test4;

insert into test4 values (Null,'Zeeshan','sudhanshu@ineuron.ai','bangalore' ),
(Null,'Zeeshan','krish@gmail.com', 'bangalore' ),
(Null,'Zeeshan' ,'hitesh@ineuron.ai','bangalore' ),
(Null,'Zeeshan' , 'shudham@gmail.com', 'bangalore');


select * from test4;

alter table test4
add check (test_name ='Zeeshan');

create table if not exists test5(
test_id int not null auto_increment,
test_name varchar(30) ,
test_mailid varchar(30),
teast_adress varchar(30),
primary key (test_id));

drop table test5

insert into test5 values (564,'Zeeshan','sudhanshu@ineuron.ai','bangalore' ),
(Null,'Zeeshan','krish@gmail.com', 'bangalore' ),
(110,'Zeeshan' ,'hitesh@ineuron.ai','bangalore' ),
(5060,'Zeeshan' , 'shudham@gmail.com', 'bangalore');

select * from test5;

create table if not exists test6(
test_id varchar(20)  default 'No_id',
test_name varchar(30) ,
test_mailid varchar(30),
teast_adress varchar(30),
primary key (test_id));

select * from test6;
drop table test6
insert into test6 (test_id,test_name,test_mailid,teast_adress) values (45,'Faizan','sudhanshu@ineuron.ai','bangalore' );


create table if not exists test7(
test_id varchar(20)  default 'No_id',
test_name varchar(30) ,
test_mailid varchar(30) unique,
teast_adress varchar(30) ,
primary key (test_id));

insert into test7 values (5641,'Zeeshan','sudhanshu@ineuron.a1i','bangalore' ),
(5681,'Zeeshan','krish@gmail.com1', 'bangalore' ),
(1101,'Zeeshan' ,'hitesh@ineuron.ai1','bangalore' ),
(50601,'Zeeshan' , 'shudham@gmail.com1', 'bangalore');

select * from test7

create table if not exists test8(
test_id int  not null auto_increment ,
test_name varchar(30)  default 'unknown',
test_mailid varchar(30) unique,
teast_adress varchar(30) check(teast_adress='Bangalore') ,
primary key (test_id));

insert into test8  (test_mailid,teast_adress) values ('farhenen@ineuro21n.a1i','Bangalore' );
select * from test8




use ineuron_fsda;
csvsql --dialect mysql --snifflimit 100000 sales_data_final.csv > output_sales.sql


CREATE TABLE sales (
	order_id VARCHAR(15) NOT NULL,
	order_date VARCHAR(50) NOT NULL,
	ship_date VARCHAR(50) NOT NULL,
	ship_mode VARCHAR(14) NOT NULL,
	customer_name VARCHAR(22) NOT NULL,
	segment VARCHAR(11) NOT NULL,
	state VARCHAR(36) NOT NULL,
	country VARCHAR(32) NOT NULL,
	market VARCHAR(6) NOT NULL,
	region VARCHAR(14) NOT NULL,
	product_id VARCHAR(16) NOT NULL,
	category VARCHAR(15) NOT NULL,
	sub_category VARCHAR(11) NOT NULL,
	product_name VARCHAR(127) NOT NULL,
	sales DECIMAL(38, 0) NOT NULL,
	quantity DECIMAL(38, 0) NOT NULL,
	discount DECIMAL(38, 3) NOT NULL,
	profit DECIMAL(38, 5) NOT NULL,
	shipping_cost DECIMAL(38, 2) NOT NULL,
	order_priority VARCHAR(8) NOT NULL,
	`year` DECIMAL(38, 0) NOT NULL
);

load data local  infile 'C:/sales_data_final.csv'
into table sales
fields terminated by ','
enclosed by '"'
lines terminated by '\n'
ignore 1 rows;

show tables;
select * from sales;
set session sql_mode =''

drop table sales;

select str_to_date(order_date,'%m/%d/%Y') from sales;
select str_to_date(ship_date,'%m/%d/%Y') from sales;

alter table sales
add column New_order_date date after order_date

alter table sales
add column New_ship_date date after ship_date

update sales
set New_order_date = str_to_date(order_date ,'%m/%d/%Y)')
select * from sales;

update sales
set New_ship_date = str_to_date(ship_date ,'%m/%d/%Y)')

select * from sales where New_order_date = '2011-04-01' ;
select * from sales where New_order_date > '2011-04-01' ;
select * from sales where New_order_date between  '2011-04-01' and '2011-12-01' ;

select now();

select curdate();
select curtime();

select * from sales where New_order_date < date_sub(now() , interval 1 week);

select date_sub(now() , interval 1 week);

select date_sub(now(), interval 1 month);
select date_sub(now(), interval 1 day);
select date_sub(now(), interval 1 year);

select year(now());
select month(now());
select day(now());

select date_sub(now(), interval 5 week );

select * from sales where New_ship_date < date_sub(now(), interval 3 month);

select dayname('2024-05-29');

alter table sales
add column flag date after order_id;

update sales
set flag = now();

desc sales;

alter table sales
modify column flag datetime;

select * from sales

alter table sales
modify column `year` date;

alter table sales
add column year1 int;

alter table sales
add column month1 int;

alter table sales
add column day1 int;

alter table sales
modify column `year` date

desc sales

update sales
set `year` = curdate();

select month(curdate());
select year(curdate());
select day(curdate());

update sales
set year1 = year(New_order_date);


update sales
set month1 = month(New_order_date);


update sales
set day1 = day(New_order_date);

select * from sales;

select avg(sales) , year1 from sales group by year1 ;
select sum(sales) , year1 from sales group by year1 ;
select sum(quantity), year1 from sales group by year1;

select max(sales) , state from sales group by state;
select sum(sales) , state from sales group by state;
select sum(quantity), state from sales group by state;

select sum(discount+profit) as total_cost, year1 ,state from sales group by state


select order_date,discount ,if(discount >0, 'yes', 'no') as discount_flag from sales

select discount,sales ,if(sales>200,'yes' ,'no') as sales_info from sales


alter table sales
add column disount_flag varchar(50)

update sales
set disount_flag = if(discount >0, 'yes', 'no');

select count(*), disount_flag from sales group by disount_flag

select if(discount >0, 'yes', 'no') from sales

select * from sales;
select max(sales) from sales;
select avg(sales) from sales;

select sales , if(sales>300 ,'Profit','Loss') as Sales_info from sales;

alter table sales
add column sales_info varchar(50);

update sales
set sales_info = if(sales>300 ,'Profit','Loss') ;

alter table sales
drop column sales_info;

select count(sales_info) ,sales_info from sales group by sales_info;

select * from sales;

delimiter $$
create function add_value(a int)
returns int
deterministic
begin
declare b int;
set b = a+10 ;
return b ;
end $$

select add_value(100);

select add_value(year1)  as new from sales;



delimiter $$
create function final_profit(a int , b int)
returns int
deterministic
begin
declare c int;
set c = a - b;
return c;
end $$

select profit, discount ,final_profit(profit ,discount) as final from sales;

delimiter &&
create function int_to_str( v int)
returns varchar(50)
deterministic
begin
declare v2 varchar(50);
set v2 = v;
return v2;
end &&

 select int_to_str(24);

 select * from sales;

select max(sales) , min(sales) from sales;

1-100 super affordable
100-300 affordable
300-600 moderate price
600+ expensive


delimiter &&
create function finder_info(a int)
returns varchar(50)
deterministic
begin
declare b varchar(50);
if a >100 then
set b ='superaffordable';
elseif a >100 and a<300 then
set b='affordable';
elseif a >300 and a<600 then
set b='Moderate';
else
set b ="expensive";
end if;
return b;
end &&


select finder_info(sales),sales from sales ;

alter table sales
add column sales_info varchar(50);

select * from sales


update sales
set sales_info = finder_info(sales)

select count(sales_info),sales_info from sales group by sales_info


create table loop_table(a int);
select * from loop_table;

delimiter $$
create procedure insert1()
begin
set @var =10;
generate :loop
insert into loop_table values(@var);
set @var = @var +2;
if @var =100 then
leave generate;
end if;
end loop generate;
end $$

call insert1();
select * from loop_table;
drop table loop_table

delimiter $$
create procedure insert2()
begin
set @var =10;
generate :loop
if @var%3=0 then
set @var = @var +1;
insert into loop_table values(@var);
set @var = @var +1;
if @var =100 then
leave generate;
end if;
end if;
end loop generate;
end $$

call insert2();
select * from loop_table;

create database key_prim;
use key_prim;

create table iNeuron(
course_id int ,
course_name varchar(60),
course_status varchar(60),
number_of_enrl int,
primary key(course_id));

insert into iNeuron(course_id,course_name,course_status,number_of_enrl)
values (26,'Mldl','recently enrolled',12);


insert into iNeuron(course_name,course_status,number_of_enrl)
values ('Fsda','enrolled',2);

select * from iNeuron;

create table students_iNeuron(
student_id int,
course_name varchar(60),
student_mail varchar(60),
student_status varchar(60),
course_id1 int,
foreign key(course_id1) references ineuron(course_id));

insert into students_iNeuron values(1254,'FSDA','test@gmail.com','active',256);
insert into students_iNeuron values(54,'MLdl','zeeshankhan@fgmail.com','active',256);
insert into students_iNeuron values(12,'Mldl','faiz@gmail.com','active',26);

select * from students_iNeuron;

create table payment(
course_name varchar(60),
course_id int,
course_live_status varchar(60),
course_lauch_date varchar(60),
foreign key(course_id) references ineuron(course_id));


insert into payment values('fsds',26,'active','8th septemeber');
insert into payment values('mldl',256,'not ctive','15th septemeber');

select * from payment;

create table class(
course_id int,
class_name varchar(60),
class_topic varchar(60),
class_duration int,
primary key(course_id),
foreign key(course_id) references ineuron(course_id));

insert into class values(256,'Fsds','Data','25');

select * from class;

alter table ineuron
drop primary key;

alter table class
drop primary key;

drop table ineuron;
drop table class;

alter table ineuron
add constraint test_prim primary key(course_id, course_status);


create table test(
id int not null,
name varchar(60),
email_id varchar(60),
mobile_no varchar(60),
address varchar(50));

alter table test
add primary key( id , email_id);

select * from test;


create table parent(
id int not null,
primary key(id));

create table child(
id int,
parent_id int,
foreign key(parent_id) references parent(id));


insert into parent values(4)

select * from parent;

insert into child values (2,1);

select * from child;

delete from parent where id=1
drop table child

create table child(
id int,
parent_id int,
foreign key(parent_id) references parent(id) on delete cascade);

insert into child values (4,2);
select * from parent;
select * from child;

delete from parent where id =2

update parent
set id = 4 where id =3

drop table child

create table child(
id int,
parent_id int,
foreign key(parent_id) references parent(id) on update cascade);

insert into child values (2,4);


select * from parent;

select * from child;

update parent
set id =30 where id =3

create table child1(
id int,
parent_id int,
foreign key(parent_id) references parent(id) on update cascade on delete cascade);

select * from parent;
select * from child1;

insert into child1 values (2,30);

update parent
set id =40 where id=4

delete from parent where id =10;

create database win_fun;
use win_fun

create table ineuron_students(
student_id int,
student_batch varchar(60),
student_name varchar(60),
student_stream varchar(60),
student_marks int,
student_mail_id varchar(500));

select * from ineuron_students;

insert into ineuron_students values (101,'fsda','Zeeshan','dataanalyst',25,'zeeshankhan29khan@gmail.com')

insert into ineuron_students values(100 ,'fsda' , 'saurabh','cs',80,'saurabh@gmail.com'),
(102 ,'fsda' , 'sanket','cs',81,'sanket@gmail.com'),
(103 ,'fsda' , 'shyam','cs',80,'shyam@gmail.com'),
(104 ,'fsda' , 'sanket','cs',82,'sanket@gmail.com'),
(105 ,'fsda' , 'shyam','ME',67,'shyam@gmail.com'),
(106 ,'fsds' , 'ajay','ME',45,'ajay@gmail.com'),
(106 ,'fsds' , 'ajay','ME',78,'ajay@gmail.com'),
(108 ,'fsds' , 'snehal','CI',89,'snehal@gmail.com'),
(109 ,'fsds' , 'manisha','CI',34,'manisha@gmail.com'),
(110 ,'fsds' , 'rakesh','CI',45,'rakesh@gmail.com'),
(111 ,'fsde' , 'anuj','CI',43,'anuj@gmail.com'),
(112 ,'fsde' , 'mohit','EE',67,'mohit@gmail.com'),
(113 ,'fsde' , 'vivek','EE',23,'vivek@gmail.com'),
(114 ,'fsde' , 'gaurav','EE',45,'gaurav@gmail.com'),
(115 ,'fsde' , 'prateek','EE',89,'prateek@gmail.com'),
(116 ,'fsde' , 'mithun','ECE',23,'mithun@gmail.com'),
(117 ,'fsbc' , 'chaitra','ECE',23,'chaitra@gmail.com'),
(118 ,'fsbc' , 'pranay','ECE',45,'pranay@gmail.com'),
(119 ,'fsbc' , 'sandeep','ECE',65,'sandeep@gmail.com');


select * from ineuron_students;

select * from (select student_batch , student_name , student_marks , dense_rank() over(partition by student_batch
order by student_marks desc) as 'rank_wise' from ineuron_students) as test where rank_wise in (1,2,3,4)



select student_batch, student_name , student_marks , row_number() over(partition by student_batch order
by student_marks desc) as row_number1 from ineuron_students

select student_batch , student_marks,student_name from ineuron_students where student_marks <
(select max(student_marks) from ineuron_students where student_batch = 'fsds') limit 1;


select count(*), student_batch from ineuron_students group by student_batch;

select count(student_batch) from ineuron_students;
select count(distinct student_batch) from ineuron_students;


select student_batch, sum(student_marks) from ineuron_students group by student_batch
select student_batch, min(student_marks) from ineuron_students group by student_batch
select student_batch, max(student_marks) from ineuron_students group by student_batch
select student_batch, avg(student_marks) from ineuron_students group by student_batch

select student_batch, count(student_batch) from ineuron_students group by student_batch;

select * from ineuron_students;

select student_batch,student_name, max(student_marks) from ineuron_students group by student_batch

select student_name from ineuron_students where student_marks =
(select max(student_marks) from ineuron_students where student_batch='fsds')

select student_name from ineuron_students where student_marks =
(select max(student_marks) from ineuron_students where student_batch='fsda')


select * from ineuron_students  where student_batch='fsda' order by student_marks desc limit 3,3;

select * from ineuron_students  where student_batch='fsde' order by student_marks desc limit 1,2;

select * from ineuron_students  where student_batch='fsds' order by student_marks desc limit 1,1

select * from ineuron_students;

select student_batch, student_name , student_stream , student_marks,
row_number() over(order by student_marks desc ) as 'row_number' from ineuron_students;


select student_batch, student_name , student_stream , student_marks,
row_number() over(partition by student_batch order by student_marks desc ) as 'row_number' from ineuron_students;

select * from (select student_batch, student_name , student_stream , student_marks,
row_number() over(partition by student_batch order by student_marks desc ) as 'row_number' from ineuron_students)  as test where `row_number`=1 ;

select student_batch, student_name , student_stream , student_marks,
row_number() over(partition by student_batch order by student_marks desc ) as 'row_number' from ineuron_students;

insert into ineuron_students values (101,'fsbc','Zeeshan','dataanalyst',65,'zeeshankhan29khan@gmail.com')


select student_batch , student_name , student_stream , student_marks,
row_number() over(partition by student_batch order by student_marks desc) as 'row_number',
rank() over(partition by student_batch order by student_marks desc) as 'rank',
dense_rank() over(partition by student_batch order by student_marks desc) as 'dense_rank' from ineuron_students;


select * from (select student_batch , student_name , student_stream , student_marks,
row_number() over(partition by student_batch order by student_marks desc) as 'row_number',
rank() over(partition by student_batch order by student_marks desc) as 'rank1' from ineuron_students) as test where rank1=1

select * from (select student_batch , student_name , student_stream , student_marks,
row_number() over(partition by student_batch order by student_marks desc) as 'row_number1' from ineuron_students) as test where row_number1=1


select * from (select student_batch , student_name , student_stream , student_marks,
row_number() over(partition by student_batch order by student_marks desc) as 'row_number',
rank() over(partition by student_batch order by student_marks desc) as 'rank',
dense_rank() over(partition by student_batch order by student_marks desc) as 'dense_rank1' from ineuron_students) as test where dense_rank1 in (2,3);


select * from ineuron_students;

select student_batch , student_marks, student_name  from ineuron_students
where student_batch='fsds' order by student_marks desc  limit 1,1;


delimiter $$
create function test500(v1 int)
returns int
deterministic
begin
declare v2 int;
set v2=v1+10;
return v2;
end$$

select test500(50);


select * from (select student_name , student_batch ,
student_marks ,dense_rank() over(partition by student_batch order by student_marks desc)
as 'dense' from ineuron_students) as test where dense in (2,3)


create table logic(
emp_id int,
last_name varchar(50),
first_name varchar(50),
salary int,
primary key(emp_id));

create table second_logic(
emp_id int,
email_id varchar(60),
address varchar(60),
mobile_no int,
student_id int,
foreign key(student_id) references logic(emp_id));

select * from logic;

insert into logic values(2,'khan','Zeeshan',1000);
insert into second_logic values(6895,'Asif@gmail.com','mangalore',87564,251);

select * from logic;
select * from second_logic;

select * from logic where salary =(select max(salary) from logic);
select emp_id,last_name,first_name,salary , row_number() over(order by salary desc) as "row_number" from logic;
select emp_id,last_name,first_name,salary , rank() over(order by salary desc) as "rank" from logic
select * from (select emp_id,last_name,first_name,salary , dense_rank() over(order by salary ) as "rank1" from logic) as test where rank1 in (1,2)



select * from ineuron_students;

select * from (select student_id, student_batch,student_name , student_marks, dense_rank() over(partition by
student_batch order by student_marks desc) as "top_salary" from ineuron_students) as test where top_salary in (1);


create database ineuron_partition;
use ineuron_partition;

create table ineuron_courses(
course_name varchar(60),
course_id int(10),
course_title varchar(80),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(80),
course_launch_year int);

select * from ineuron_courses;

insert into ineuron_courses values('machine_learning' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,

('aiops' , 101 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019);


select * from ineuron_courses;

select * from ineuron_courses where course_launch_year ='2019'

create table ineuron_courses1(
course_name varchar(60),
course_id int(10),
course_title varchar(80),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_launch_year int)
partition by range(course_launch_year)(
partition p0 values less than (2019),
partition p1 values less than (2020),
partition p2 values less than (2021),
partition p3 values less than (2022),
partition p4 values less than (2023));

drop table ineuron_courses1
select * from ineuron_courses1


insert into ineuron_courses1 values('machine_learning' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,

('aiops' , 101 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ;

select * from ineuron_courses1 where course_launch_year=2020


select partition_name , table_name , table_rows from information_schema.partitions where
table_name = 'ineuron_courses1';

create table ineuron_courses2(
course_name varchar(60),
course_id int(10),
course_title varchar(80),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_launch_year int)
partition by hash(course_launch_year)
partitions  5;

select partition_name , table_name , table_rows from information_schema.partitions where
table_name = 'ineuron_courses2';

create table ineuron_courses3(
course_name varchar(60),
course_id int(10),
course_title varchar(80),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_launch_year int)
partition by hash(course_launch_year)
partitions  10;

select partition_name , table_name , table_rows from information_schema.partitions where
table_name = 'ineuron_courses3';

insert into ineuron_courses3 values('machine_learning' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,

('aiops' , 101 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 101 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 101 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 101 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ;

select partition_name , table_name , table_rows from information_schema.partitions where
table_name = 'ineuron_courses3';

create table ineuron_courses4(
course_name varchar(60),
course_id int(10) primary key,
course_title varchar(80),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_launch_year int)
partition by key()
partitions  10;

insert into ineuron_courses4 values('machine_learning' , 151 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,

('aiops' , 101 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 102 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 103 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 104 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 105 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 106 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 107 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 108 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 109 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 110 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 111 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 121 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 131 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 141 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ;


select * from ineuron_courses4;
select partition_name , table_name , table_rows from information_schema.partitions where
table_name = 'ineuron_courses4';

create table ineuron_courses5(
course_name varchar(60) unique key not null,
course_id int(10),
course_title varchar(80),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_launch_year int)
partition by key(course_name)
partitions  10;

select * from ineuron_courses5;

insert into ineuron_courses5 values('machine_learning' , 151 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,

('aiops' , 101 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 102 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 103 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 104 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 105 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 106 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 107 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 108 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 109 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 110 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 111 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 121 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 131 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 141 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ;

select partition_name , table_name , table_rows from information_schema.partitions where
table_name = 'ineuron_courses5';



create table ineuron_courses6(
course_name varchar(50) ,
course_id int(10) ,
course_title varchar(60),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_launch_year int)
partition by list(course_launch_year)(
partition p0 values in(2019,2020),
partition p1 values in(2022,2021)
)


insert into ineuron_courses6 values('machine_learning' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,

('aiops' , 102 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 103 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 104 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 105, 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 106 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 107 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 108 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 109 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 110 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 1011 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 1012 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 1013 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 1014 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 1015 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019);

select * from ineuron_courses6;
select partition_name , table_name , table_rows from information_schema.partitions where
table_name = 'ineuron_courses6';


create table ineuron_courses7(
course_name varchar(50) ,
course_id int(10) ,
course_title varchar(60),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_launch_year int)
partition by range columns(course_name ,course_id,course_launch_year )(
partition p0 values less than ('aiops',105,2019),
partition p1 values less than ('fsds' ,110,2021),
partition p2 values less than ('MERN',116,2023)
)
select partition_name , table_name , table_rows from information_schema.partitions where table_name = 'ineuron_courses7'

insert ignore into ineuron_courses7 values('machine_learning' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,

('aiops' , 102 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 103 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 104 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 105, 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 106 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 107 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 108 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 109 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 110 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 1011 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 1012 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 1013 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 1014 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 1015 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019);

select ('aiops',105,2019) < ('fsds' ,110,2021)
select ('a') > ('b')


create table ineuron_courses8(
course_name varchar(50) ,
course_id int(10) ,
course_title varchar(60),
course_desc varchar(80),
launch_date date,
course_fee int,
course_mentor varchar(60),
course_launch_year int)
partition by list columns(course_name)(
partition p0 values  in('aiops','data analytics','Dl','RL'),
partition p1 values  in('fsds' ,'big data','blockchain'),
partition p2 values  in('MERN','java','interview prep','fsda')
)

insert ignore into ineuron_courses9 values('machine_learning' , 101 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,

('aiops' , 102 , 'ML', "this is aiops course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('dlcvnlp' , 103 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('aws cloud' , 104 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('blockchain' , 105, 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('RL' , 106 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('Dl' , 107 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('interview prep' , 108 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019) ,
('big data' , 109 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('data analytics' , 110 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fsds' , 1011 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('fsda' , 1012 , 'ML', "this is ML course" ,'2021-07-07',3540,'sudhanshu',2021) ,
('fabe' , 1013 , 'ML', "this is ML course" ,'2022-07-07',3540,'sudhanshu',2022) ,
('java' , 1014 , 'ML', "this is ML course" ,'2020-07-07',3540,'sudhanshu',2020) ,
('MERN' , 1015 , 'ML', "this is ML course" ,'2019-07-07',3540,'sudhanshu',2019)

create database operation
use operation

create table if not exists course(
course_id int,
course_name varchar(50),
course_desc varchar(60),
course_tag varchar(50));


create table if not exists student(
student_id int,
student_name varchar(60),
student_mobile int,
student_course_enroll varchar(60),
student_course_id int)

insert into course values(101 , 'fsda' , 'full stack data analytics' , 'Analytics'),
(102 , 'fsds' , 'full stack data analytics' , 'Analytics'),
(103 , 'fsds' , 'full stack data science' , 'DS'),
(104 , 'big data' , 'full stack big data' , 'BD'),
(105 , 'mern' , 'web dev' , 'mern'),
(106 , 'blockchain' , 'full stack blockchain' , 'BC'),
(101 , 'java' , 'full stack java' , 'java'),
(102 , 'testing' , 'full testing ' , 'testing '),
(105 , 'cybersecurity' , 'full stack cybersecurity' , 'cybersecurity'),
(109 , 'c' , 'c language' , 'c'),
(108 , 'c++' , 'C++ language' , 'language');

insert into student values(301 , "sudhanshu", 3543453,'yes', 101),
(302 , "sudhanshu", 3543453,'yes', 102),
(301 , "sudhanshu", 3543453,'yes', 105),
(302 , "sudhanshu", 3543453,'yes', 106),
(303 , "sudhanshu", 3543453,'yes', 101),
(304 , "sudhanshu", 3543453,'yes', 103),
(305 , "sudhanshu", 3543453,'yes', 105),
(306 , "sudhanshu", 3543453,'yes', 107),
(306 , "sudhanshu", 3543453,'yes', 103)

select * from course;
select * from student;

select c.course_id ,c.course_name , c.course_desc,s.student_id,
s.student_name from course  as c inner join student as s on
c.course_id = s.student_course_id;


select course_id, course_name,course_desc ,student_id
student_name from course inner join student on
course_id = student_course_id;

select c.course_id ,c.course_name , c.course_desc,s.student_id,
s.student_name from course  as c left join student as s on
c.course_id = s.student_course_id where student_id is null;


select c.course_id ,c.course_name , c.course_desc,s.student_id,
s.student_name from course  as c right join student as s on
c.course_id = s.student_course_id where course_id is null;

select c.course_id ,c.course_name , c.course_desc,s.student_id,
s.student_name from course  as c cross join student as s on
c.course_id = s.student_course_id

select c.course_id ,c.course_name , c.course_desc,s.student_id,
s.student_name from course  as c cross join student as s

select * from course;
select * from student;

select left(course_name,2) from course;
select concat(left(student_name,2),'**') from student;
select upper(student_name) from student;
select lower(student_name) from student;

select date_add(curdate(),interval 10 day)

delimiter &&
create function func(a int)
returns varchar(50)
deterministic
begin
declare b varchar(50);
set b=a;
return b;
end &&

select func(50)

delimiter &&
create function even(a int)
returns varchar(60)
deterministic
begin
declare b varchar(60);
if a%2=0 then
set b = 'even number';
else
set b = 'odd number';
end if;
return b;
end &&

select even(course_id) from course ;
select * from course;

alter table course
add column day1 varchar(50)

update course
set day1 = day(date1)

select left(course_name,2) from course;
select substr(course_name,2,4) from course;
select instr(course_name,binary'a') from course;
select concat(left(course_name,2),'***') from course;
select subdate(sysdate(),interval 2 day)

select s.student_id, s.student_course_id from student s,
student s1 where s.student_course_id =s1.student_course_id
and s.student_id != s1.student_id

select * from course group by course_name order by course_id desc limit 6,1;

select course_id , course_name , dense_rank() over(
order by course_id desc) as 'test' from course


show index from course

create table if not exists course1(
course_id int,
course_name varchar(50),
course_desc varchar(60),
course_tag varchar(50),
index(course_id));

select * from course1
show index from course1

insert into course1 values(101 , 'fsda' , 'full stack data analytics' , 'Analytics'),
(102 , 'fsds' , 'full stack data analytics' , 'Analytics'),
(103 , 'fsds' , 'full stack data science' , 'DS'),
(104 , 'big data' , 'full stack big data' , 'BD'),
(105 , 'mern' , 'web dev' , 'mern'),
(106 , 'blockchain' , 'full stack blockchain' , 'BC'),
(101 , 'java' , 'full stack java' , 'java'),
(102 , 'testing' , 'full testing ' , 'testing '),
(105 , 'cybersecurity' , 'full stack cybersecurity' , 'cybersecurity'),
(109 , 'c' , 'c language' , 'c'),
(108 , 'c++' , 'C++ language' , 'language');

create table if not exists course2(
course_id int,
course_name varchar(50),
course_desc varchar(60),
course_tag varchar(50),
index(course_id,course_name));

show index from course1;


create table if not exists course3(
course_id int,
course_name varchar(50),
course_desc varchar(60),
course_tag varchar(50),
index(course_id,course_name,course_desc));


show index from course2;

insert into course2 values(101 , 'fsda' , 'full stack data analytics' , 'Analytics'),
(102 , 'fsds' , 'full stack data analytics' , 'Analytics'),
(103 , 'fsds' , 'full stack data science' , 'DS'),
(104 , 'big data' , 'full stack big data' , 'BD'),
(105 , 'mern' , 'web dev' , 'mern'),
(106 , 'blockchain' , 'full stack blockchain' , 'BC'),
(101 , 'java' , 'full stack java' , 'java'),
(102 , 'testing' , 'full testing ' , 'testing '),
(105 , 'cybersecurity' , 'full stack cybersecurity' , 'cybersecurity'),
(109 , 'c' , 'c language' , 'c'),
(108 , 'c++' , 'C++ language' , 'language');

select * from course2 where course_id=106


select course_desc ,course_name  from course
union
select student_id,student_name from student

select course_id ,course_name  from course
union
select student_id,student_name from student

select course_id ,course_name ,course_desc from course
union
select student_id,student_name from student

select course_id ,course_name  from course
union all
select student_id,student_name from student

with sample_students as (
select * from course where course_id  in (101,102,106))
select * from sample_students where course_name ='testing';

with new_table as(
select c.course_id ,c.course_name , c.course_desc,s.student_id,
s.student_name from course  as c right join student as s on
c.course_id = s.student_course_id ) select * from new_table where
course_id in (101,102);

with new1 as
(select 1 as col1 , 2 as col2
union all
select 3,4) select * from new1 where col1=1

with recursive cte(n) as
(select 1 union all select n+1 from cte where n<5)
select * from cte


use ineuron

create table course(
course_id int,
course_desc varchar(60),
course_mentor varchar(60),
course_price int,
course_discount int);

create table course_update(
course_mentor_update varchar(60),
course_price_update int,
course_discount_update int);

select * from course;
select * from course_update;

create table course1(
course_id int,
course_desc varchar(60),
course_mentor varchar(60),
course_price int,
course_discount int,
create_date date);

select * from course1
desc course1

delimiter $$
create trigger course1_befor_insert
before insert on course1 for each row
begin
set new.create_date = sysdate();
end; $$


insert into course1 (course_id,course_desc,course_mentor,course_price,course_discount) values(102,'FSDS','Zeeshan',4000,500);

create table course2(
course_id int,
course_desc varchar(60),
course_mentor varchar(60),
course_price int,
course_discount int,
create_date date,
user_info varchar(60));

delimiter $$
create trigger course2_before_insert
before insert on course2 for each row
begin
declare user_val varchar(60);
set new.create_date = sysdate();
select user() into user_val;
set new.user_info = user_val;
end $$

select * from course2
select user();

insert into course2 (course_id,course_desc,course_mentor,course_price,course_discount) values(105,'FSDA','Khan',5000,5000);


create table ref_course(
record_insert_date date,
record_insert_user varchar(50));

select * from ref_course;

delimiter $$
create trigger course21_before_insert
before insert on course2 for each row
begin
declare user_val varchar(60);
set new.create_date = sysdate();
select user() into user_val;
set new.user_info = user_val;
insert into ref_course values(sysdate(),user_val);
end $$

create table test1(
c1 varchar(60),
c2 date,
c3 int);

create table test2(
c1 varchar(60),
c2 date,
c3 int)

create table test3(
c1 varchar(60),
c2 date,
c3 int)

select * from test1;
select * from test2;
select * from test3;

delimiter $$
create trigger insert_test2
before insert on test1 for
each row
begin
insert into test2 values('first_insertion',sysdate(),202);
insert into test3 values('first_insertion',sysdate(),4000);
end $$

insert into test4 values('arushi', '2200-04-20',400);
select * from test4

create table test4(
c1 varchar(60),
c2 date,
c3 int);

delimiter $$
create trigger insert_test4
before insert on test4 for
each row
begin
update test2
set c1 = 'krish' where c1='krishna';
delete from test3
where c1='first_insertion';
end $$



delimiter $$
create trigger to_delete_others
after delete on test4 for
each row
begin
insert into test2 values('sudhanshu',sysdate(),40000);
insert into test3 values('Zeeshan',sysdate(),50000);
end $$

select * from test4
select * from test2
select * from test3

insert into test4 values('help', sysdate(),90)

delete from test4 where c1='arushi'


delimiter $$
create trigger on_same_table1
before delete on test2 for
each row
begin
insert into test2(c1,c2,c3) values(old.c1,old.c2,old.c3);
end $$


select * from test2

delete from test2 where c1='krish';


create table test11(
c1 varchar(60),
c2 date,
c3 int);

create table test12(
c1 varchar(60),
c2 date,
c3 int)

create table test13(
c1 varchar(60),
c2 date,
c3 int)

delimiter $$
create trigger on_same_table11
before delete on test11 for
each row
begin
insert into test12(c1,c2,c3) values(old.c1,old.c2,old.c3);
end $$

insert into test11 values('sudhanshu',sysdate(),40000);
select * from test11
select * from test12
select * from test13

delimiter $$
create trigger on_same_table11_again
after delete on test11 for
each row
begin
insert into test12(c1,c2,c3) values(old.c1,old.c2,old.c3);
end $$

insert into test11 values('Zeeshan',sysdate(),8000);

delete from test11 where c1='Zeeshan';


delimiter $$
create trigger before_update_test14
before update on test14 for
each row
begin
insert into test15(c1,c2,c3) values(old.c1,old.c2,old.c3);
end $$



delimiter $$
create trigger before_update11_test14
after update on test14 for
each row
begin
insert into test16(c1,c2,c3) values(old.c1,old.c2,old.c3);
end $$

create table test14(
c1 varchar(60),
c2 date,
c3 int);

create table test15(
c1 varchar(60),
c2 date,
c3 int)

create table test16(
c1 varchar(60),
c2 date,
c3 int)

insert into test14 values('krish',sysdate(),80000);

select * from test14;
select * from test15;
select * from test16;

update test14
set c1='Zeeshan' where c1='krish'


delimiter $$
create trigger before_update11_test15
after update on test15 for
each row
begin
insert into test16(c1,c2,c3) values(new.c1,new.c2,new.c3);
end $$

update test15
set c1='xyz' where c1='Zeeshan'

use ineuron_partition
select * from ineuron_partition.ineuron_courses;

select * ,
case
when  course_launch_year =2022 then 'this is year 2022'
else 'this is not my year'
end as year_info
from ineuron_courses;

select * ,
case
when  length(course_name)=2 then 'length is 2'
when length(course_name)= 4 then 'length is 4'
else 'neither 2 or 4'
end as ratings
from ineuron_courses;


select * ,
case
when  length(course_name)=2 then sysdate()
when length(course_name)= 4 then sysdate()
else 'neither 2 or 4'
end as ratings
from ineuron_courses;

select * ,
case
when course_mentor ='sudhanshu' then 'my teacher'
else 'waste of time'
end as teacher_info
from ineuron_courses;

select * ,
case
when course_name ='fsds' then 'My course'
else 'Not my course'
end as course_info
from ineuron_courses;


update ineuron_courses
set course_name =  case
when course_name ='RL' then 'Reinforcement learning'
when course_name  ='DL' then 'Deep learning'
else 'no information'
end

select * from ineuron_partition.ineuron_courses;

alter table ineuron_courses
add column fees_info varchar(60);

update ineuron_courses
set fees_info = case
when course_launch_year ='2020' then 'Year is 2020'
when course_launch_year ='2019' then 'Year is 2019'
else 'Others'
end
